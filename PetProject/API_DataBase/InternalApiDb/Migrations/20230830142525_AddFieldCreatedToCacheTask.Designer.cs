// <auto-generated />
using System;
using DataStore.InternalApiDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataStore.InternalApiDb.Migrations
{
    [DbContext(typeof(InternalApiContext))]
    [Migration("20230830142525_AddFieldCreatedToCacheTask")]
    partial class AddFieldCreatedToCacheTask
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cur")
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataStore.InternalApiDb.Entities.CacheTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CacheTackStatus")
                        .HasColumnType("integer")
                        .HasColumnName("cache_tack_status");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("NewBaseCurrency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("new_base_currency");

                    b.HasKey("Id")
                        .HasName("pk_cache_tasks");

                    b.ToTable("cache_tasks", "cur");
                });

            modelBuilder.Entity("DataStore.InternalApiDb.Entities.Currencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.HasKey("Id")
                        .HasName("pk_currencies_list");

                    b.ToTable("currencies_list", "cur");
                });

            modelBuilder.Entity("DataStore.InternalApiDb.Entities.CurrencyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int?>("CurrenciesId")
                        .HasColumnType("integer")
                        .HasColumnName("currencies_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_currency_entity");

                    b.HasIndex("CurrenciesId")
                        .HasDatabaseName("ix_currency_entity_currencies_id");

                    b.ToTable("currency_entity", "cur");
                });

            modelBuilder.Entity("DataStore.InternalApiDb.Entities.CurrencyEntity", b =>
                {
                    b.HasOne("DataStore.InternalApiDb.Entities.Currencies", null)
                        .WithMany("CurrenciesList")
                        .HasForeignKey("CurrenciesId")
                        .HasConstraintName("fk_currency_entity_currencies_list_currencies_id");
                });

            modelBuilder.Entity("DataStore.InternalApiDb.Entities.Currencies", b =>
                {
                    b.Navigation("CurrenciesList");
                });
#pragma warning restore 612, 618
        }
    }
}
